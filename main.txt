package com.capg.app.ParallelProject_152642;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import com.capg.app.bean.CustomerDetails;
import com.capg.app.dao.WalletDAO;
import com.capg.app.exception.AccountNotCretatedException;
import com.capg.app.service.CustomerDetailsValidation;
import com.capg.app.service.WalletService;

public class App {

	static boolean result = false;
	boolean flag;
	static int option;
	static double balance;

	public static void main(String[] args) {
		
		
		do {
			System.out.println("Payment Wallet Application\n");
		System.out.println("      1.Create Account      ");
		System.out.println("      2.Login to account    ");
		System.out.println("      3.Exit                ");
		System.out.println("Select the option:");
		Scanner sc = new Scanner(System.in);
		 option = sc.nextInt();
		
		switch (option) {
		case 1:
			// Creating a new account
			createAccount();
			break;

		case 2:
			// Login to an account
			walletLogin();
			break;

		case 3:
			// Exit the application
			System.out.println("Thank you!");
			System.exit(0);
			break;
		}}while (option != 2);
	}

	private static void createAccount() {
		// Creating a new account
		CustomerDetails details = new CustomerDetails();
		WalletDAO dao = new WalletDAO();
		WalletService service = new WalletService();
		CustomerDetailsValidation validate = new CustomerDetailsValidation();
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter your name:");
		String name = sc.nextLine();
		System.out.println("Enter email:");
		String email = sc.nextLine();
		System.out.println("Enter phone number:");
		String phoneNumber = sc.nextLine();
		System.out.println("Enter username:");
		String username = sc.nextLine();
		System.out.println("Set a password:");
		String password = sc.nextLine();
		System.out.println("Enter age:");
		int age = sc.nextInt();
		String accountNumber = (int)(Math.random() * 123456) + "";
		List<String> transactions = new ArrayList();
		details.setPhoneNumber(phoneNumber);
		details.setEmail(email);
		details.setAge(age);
		details.setUsername(username);
		details.setPassword(password);
		details.setAccountNumber(accountNumber);
		details.setTransactions(transactions);

		boolean isValidname = validate.validateName(name);
		boolean isValidemail = validate.validateEmail(email);
		boolean isValidphoneNumber = validate.validatePhoneNumber(phoneNumber);
		boolean isValidage = validate.validateAge(age);
		boolean isValidusername = validate.validateUsername(username);
		boolean isValidpassword = validate.validatePassword(password);

		if (isValidname && isValidemail && isValidphoneNumber && isValidage && isValidusername && isValidpassword) {
			result = service.createAccount(details);
		}
		if (result) {
			System.out.println("Account created");
			System.out.println("Your account number is:" + accountNumber);
			extendedMenu();
		} else {
			try {
				throw new AccountNotCretatedException("Registration Failed! Please try again.");
			} catch (AccountNotCretatedException e) {
				System.err.println(e);
			}
		}
	}

	private static void extendedMenu() {
		Scanner sc = new Scanner(System.in);
		WalletDAO dao = new WalletDAO();
		WalletService service = new WalletService();
		CustomerDetails details=new CustomerDetails();
		boolean flag = false;
		System.out.println("Select option:\n");
		System.out.println("1.Deposit\n2.Withdraw\n3.Fund Transfer\n4.Show Balance\n5.Print Transactions\n");
		int choice = sc.nextInt();
		switch (choice) {
		case 1:
			System.out.println("Enter the amount to be deposited:");
			balance=sc.nextInt();
			
			flag= service.deposit(balance);
			if (flag==true) {
				System.out.println("Funds deposited successfully");
			} else {
				System.out.println("Incorrect details! Try again.");
			}
			break;
		case 2:
			flag = service.withdraw(balance);
			if (flag == true) {
				System.out.println("Funds withdrawn successfully");
			} else {
				System.out.println("Incorrect details! Try again.");
			}
			break;
		case 3:
			System.out.println("Enter Account number of sender");
			String senderAccountNumber = sc.nextLine();
			System.out.println("Enter Account number of receiver");
			String ReceiverAccountNumber = sc.nextLine();
			flag = service.fundTransfer(senderAccountNumber, ReceiverAccountNumber);
			if (flag == true) {
				System.out.println("Amount transferred");
			} else {
				System.out.println("Failed to transfer!");
			}
			break;
		case 4:
			flag = service.showBalance();
			if (flag == false) {
				System.out.println("Incorrect details! Try again.");
			}
			break;
		case 5:
			
//			System.out.println("Enter account number");
//			String accountNumber = sc.nextLine();
			 System.out.println(service.printTransactions().toString());
//			if (flag == false) {
//				System.out.println("Incorrect details! Try again.");
//			}
			break;
		default:
			break;

		}
	}

	
		// Logging into the account
//		Scanner sc = new Scanner(System.in);
//		WalletDAO dao = new WalletDAO();
//		WalletService service = new WalletService();
//		CustomerDetails details=new CustomerDetails();
//		boolean flag;
	private static void walletLogin() {
		WalletService service = new WalletService();
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter username");
		String username = sc.nextLine();
		System.out.println("Enter password");
		String password=sc.nextLine();
		service.walletLogin(username, password);
		}
	}


//		System.out.println("Select option:\n");
//		System.out.println("1.Deposit\n2.Withdraw\n3.Fund Transfer\n4.Show Balance\n5.Print Transactions\n");
//		int choice = sc.nextInt();
//		switch (choice) {
//		case 1:
//			flag = service.deposit(balance);
//			if (flag == true) {
//				System.out.println("Funds deposited successfully");
//			} else {
//				System.out.println("Incorrect details! Try again.");
//			}
//			break;
//		case 2:
//			flag = service.withdraw(balance);
//			if (flag == true) {
//				System.out.println("Funds withdrawn successfully");
//			} else {
//				System.out.println("Incorrect details! Try again.");
//			}
//			break;
//		case 3:
//			System.out.println("Enter Account number of sender");
//			String senderAccountNumber = sc.nextLine();
//			System.out.println("Enter Account number of receiver");
//			String ReceiverAccountNumber = sc.nextLine();
//			flag = service.fundTransfer(senderAccountNumber, ReceiverAccountNumber);
//			if (flag == true) {
//				System.out.println("Amount transferred");
//			} else {
//				System.out.println("Failed to transfer!");
//			}
//			break;
//		case 4:
//			flag = service.showBalance();
//			if (flag == false) {
//				System.out.println("Incorrect details! Try again.");
//			}
//			break;
//		case 5:
//			System.out.println("Enter account number");
//			String accountNumber = sc.nextLine();
//			flag = service.printTransactions(accountNumber);
//			if (flag == false) {
//				System.out.println("Incorrect details! Try again.");
//			}
//			break;
//		default:
//			break;

	
