package com.capg.app.dao;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.capg.app.bean.CustomerDetails;


public class WalletDAO implements IWalletDAO {
	boolean flag=false;
	double bal;
	String str;
	String str1;
	//Map<String, CustomerDetails> account = new HashMap();
	CustomerDetails details = new CustomerDetails();
	static List<CustomerDetails> list= new ArrayList<CustomerDetails>(); 
	public boolean deposit(double balance) {
		boolean flag = false;
		Iterator<CustomerDetails> it= list.iterator();
		while(it.hasNext()) {
			CustomerDetails r;
			r=it.next();
			if(it.hasNext()){
			bal = details.getBalance() + balance;
			r.setBalance(bal);
			flag = true;
			str = balance + "deposited";
			r.getTransactions().add(str);
		}
		}
		return flag;
	}

	

	public boolean showBalance() {
		Iterator<CustomerDetails> it= list.iterator();
		while(it.hasNext()) {
			CustomerDetails r;
			r=it.next();
			if(it.hasNext()){
			flag = true;
			System.out.println(r.getBalance());
		}}
		return flag;
	}

	public CustomerDetails walletLogin(String username, String password) {

		// if(username.equals(details.getUsername())&&
		// password.equals(details.getPassword()))

		Iterator<CustomerDetails> it= list.iterator();
		while(it.hasNext()) {
			CustomerDetails r;
			r=it.next();
			if((r.getUsername()==username)&& r.getPassword()==password) {
				return r;
			}
			}
		return null;
	}

	public boolean withdraw(double balance) {
		boolean flag = false;
		Iterator<CustomerDetails> it= list.iterator();
		while(it.hasNext()) {
			CustomerDetails r;
			r=it.next();
			if (r.getBalance() < 500) {
				System.out.println("Can't withdraw balance is below 500");
			} else if (r.getBalance() >= balance) {
				bal = r.getBalance() - balance;
				r.setBalance(bal);
				System.out.println("Amount withdrawn.");
				str = balance + "withdrawn";
				r.getTransactions().add(str);
			}
		}
		return flag;
	}

	public boolean fundTransfer(String senderAccountNumber, String ReceiverAccountNumber) {
		boolean senderFlag = false;
		boolean receiverFlag = false;
		Iterator<CustomerDetails> it= list.iterator();
		while(it.hasNext()) {
			CustomerDetails r;
			CustomerDetails r1 = null;
			r=it.next();
			if (r.getBalance() < 500) {
				System.out.println("Can't transfer! Balance is below 500");
			} else if (r.getBalance() >= bal) {
			if(it.hasNext()) {
					if (ReceiverAccountNumber.equals(r1)) {
						receiverFlag = true;
						bal = r.getBalance() - bal;
						r.setBalance(bal);
						bal =r.getBalance() + bal;
						r.setBalance(bal);
						str = bal + "transferred to account number:" + ReceiverAccountNumber;
						str1 = bal + "deposited from account number:" + senderAccountNumber;
						r.getTransactions().add(str);
						r.getTransactions().add(str1);
					}
				}
			} else {
				System.out.println("Insufficient funds in the account!");
			}
		}
		if (!senderFlag) {
			System.out.println("Wrong sender details");
		}
		if (!receiverFlag && senderFlag) {
			System.out.println("Wrong receiver account number");
		}
		if (senderFlag && receiverFlag)
			return true;
		else
			return false;
	}

	public boolean createAccount(CustomerDetails details) {
		flag= list.add(details);
		
		return flag;
		//account.put(details.getAccountNumber(), details);
		// account.put(details.getUsername(), details);
		//return true;
	}
	public List<CustomerDetails> printTransactions() {
//		boolean flag = false;
//		for (String accNo : account.keySet()) {
//			if (accountNumber.equals(accNo)) {
//				flag = true;
//				System.out.println(account.get(accountNumber).getTransactions());
//			}
//		}
		return list;
	}

}
